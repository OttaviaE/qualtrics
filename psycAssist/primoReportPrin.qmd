---
title: "Analisi preliminari PRIN2020"
format: 
  html: 
    page-layout: full
    toc: true
    toc-location: left
    code-tools:
      source: true
      toggle: false
      caption: none
editor: source
execute: 
  eval: true
  echo: false
  message: false
theme: minty
editor_options: 
  chunk_output_type: console
---



## Intro



Questo file contiene le prime analisi sui dati del progetto prin.

Questo file si autocompila ogni vota andandosi a prendere il dataset più recente che trova nella cartella data. 

Nella prima sezione ci sono una serie di analisi preliminari, sulle accuratezze e sui tempi. Segue poi una parte più specifica sul modello di Rasch.

# Descrittive


```{r}
#| message: false
  
rm(list = ls())
# current_path = rstudioapi::getActiveDocumentContext()$path
# setwd(dirname(current_path))
library(ggplot2)
library(dplyr)
# importa il data set con le caratteriscctihe degli item -----
guide = read.csv("D:/PRIN2020/qualtrics/skill_young.csv",
                 header = T, sep = ",")
# csv.files = list.files(pattern = ".csv")
# 
# dates = gsub("matdata_", "", csv.files)
# dates = gsub(".csv", "", dates)
# dates = gsub("_", "-", dates)
# dates = as.Date(dates)
# latest = max(dates)
# latest = gsub("-", "_", latest)

# importa il csv con la data più recente -----
data = read.csv("D:/PRIN2020/qualtrics/psycAssist/matdata_2023_02_23.csv", 
                header = T, sep = ",")

# fa il check per vedere che  non ci siano proev
#table(data$external_code)
#table(data$id)

# viene tolto l'utente di prova
data = data[!data$external_code %in% "UTENTE01", ]

# primo check per vedere la percentuale di risposte corrette 

temp = data[, c("id", "id_question", "task_success")]


temp$task_success = ifelse(temp$task_success == "True", 
                           1, 0)
wide.temp = reshape(temp, 
                    idvar = "id", 
                    timevar = "id_question", 
                    direction = "wide")
wide.temp$total_score = rowSums(wide.temp[,-1], na.rm = T)
```

::: {.panel-tabset}

## Distribuzione grezza punteggi accuratezza

```{r}

wide.temp = wide.temp[order(wide.temp$total_score), ]
wide.temp$new.id = 1:nrow(wide.temp)

ggplot(wide.temp, 
       aes(x=as.factor(new.id), y = total_score)) + geom_point() +
  geom_hline(yintercept = mean(wide.temp$total_score), 
             col = "red") + 
  geom_hline(yintercept = quantile(wide.temp$total_score)[3], 
             col = "blue") + 
  geom_hline(yintercept = quantile(wide.temp$total_score)[2], 
             col = "green") + 
  geom_hline(yintercept = length(unique(data$id_question))*0.20, 
             col = "purple") +
  theme_light() + 
  theme(axis.text.x = element_text(angle = 90)) + 
 annotate("text", color = "red", 
          x = length(wide.temp$id)-5, 
y = mean(wide.temp$total_score), label = "Mean") + 
  annotate("text", color = "blue", 
           x = length(wide.temp$id)-5, 
           y = median(wide.temp$total_score), label = "Median") + 
  annotate("text", color = "green", 
           x = length(wide.temp$id)-5, 
           y = quantile(wide.temp$total_score)[2], label = "Q1") + ylab("Score accuratezza") +
  theme(axis.title.x = element_blank(), 
        axis.text.x = element_blank())
```


## Distrbuzione grezza punteggi accuratezza (considerando la scolarità)

```{r}
wide.temp = wide.temp[order(wide.temp$total_score), ]
wide.temp$new.id = 1:nrow(wide.temp)
# devo unire la scolarità

scol_data = data[, c("id", "anni_scolarita")]
scol_data = scol_data %>% 
  distinct()

wide.temp = merge(wide.temp, scol_data, by = "id")

ggplot(wide.temp, 
       aes(x=as.factor(new.id), 
           y = total_score,  color = anni_scolarita)) + geom_point() +
  geom_hline(yintercept = mean(wide.temp$total_score), 
             col = "red") + 
  geom_hline(yintercept = quantile(wide.temp$total_score)[3], 
             col = "blue") + 
  geom_hline(yintercept = quantile(wide.temp$total_score)[2], 
             col = "green") + 
  geom_hline(yintercept = length(unique(data$id_question))*0.20, 
             col = "purple") +
  theme_light() + 
  theme(axis.text.x = element_text(angle = 90)) + 
 annotate("text", color = "red", 
          x = length(wide.temp$id)-5, 
y = mean(wide.temp$total_score), label = "Mean") + 
  annotate("text", color = "blue", 
           x = length(wide.temp$id)-5, 
           y = median(wide.temp$total_score), label = "Median") + 
  annotate("text", color = "green", 
           x = length(wide.temp$id)-5, 
           y = quantile(wide.temp$total_score)[2], label = "Q1") + ylab("Score accuratezza") +
  theme(axis.title.x = element_blank(), 
        axis.text.x = element_blank(), 
        legend.position = "bottom") 
```



:::

```{r}
perc = .20
wide.temp$filter = ifelse(wide.temp$total_score <= length(unique(data$id_question))*perc, 
                          "out", "in")

# prendo i nomi di quelli che hanno un punetggio sotto il 20% 

sbj.out = wide.temp[wide.temp$filter %in% "out", "id"]


# prima di toglierli dal dataset totale, guardo l'efftto dello sperimentatore sul tempo 
# e sul punteggio totale 
# prima cosa: calcolo il tempo 
# tolgo quelli che non hanno finito 
data = data[!data$date_end %in% "NULL", c("id", "gender", "birth_date", 
                                       "anni_scolarita", "city",
                                       "response_vector", "task_success", "id_question", "province",
                                       "external_code", "clinic_id",
                                       "start_time", "end_time"
)]

data$time.diff.item = difftime(data$end_time, 
                            data$start_time, 
                            units = "secs")
data$time.diff.item = as.numeric(data$time.diff.item)
sum.time =aggregate(time.diff.item ~ id, 
                    data, sum)
colnames(sum.time)[2] = "sum.time"
sum.time$sum.time = as.numeric(sum.time$sum.time)

# # unisco il dettaglio sui tempi al dataset ----
data = merge(data, sum.time, by="id")
# unisco anche i punteggi totali e il filter 

wide.small = wide.temp[, c("id", "total_score", "filter")]

data = merge(data, wide.small, by = "id")

# rimuovo gli outlier 
data = data[data$filter %in% "in", ]
data$city = tolower(data$city)

```

Per il momento, ho deciso di tenere tutti i soggetti che rispondono correttamente ad almeno il `r perc*100` % delle domande. I soggetti che non hanno risposto correttamente ad almeno il 20% sono `r length(sbj.out)`

# Effetto sperimentatore

::: {.panel-tabset}

## Tempi di risposta
```{r}
ggplot(data, 
       aes(x = as.factor(clinic_id), y = sum.time, 
           color = anni_scolarita)) + geom_boxplot(size = 1.2) + 
  theme_light() + 
  theme(legend.position = "bottom") + xlab("Codice sperimentatore") +
  ylab("Tempo di esecuzione del compito in secondi") + 
  ggtitle("Distribuzione tempi di risposta per sperimentatore") 
```


## Accuratezze


```{r}
ggplot(data, 
       aes(x = as.factor(clinic_id), y = total_score, 
           color = anni_scolarita)) + geom_boxplot(size =1.2)  + 
  theme_light() + 
  theme(legend.position = "bottom") + xlab("Codice sperimentatore") +
  ylab("Score totale") + 
  ggtitle("Distribuzione score accuratezze totali per sperimentatore")

```

## Città 

```{r}
ggplot(data, 
       aes(x = as.factor(city), y = total_score, 
           color = anni_scolarita)) + geom_boxplot(size = 1.1) + 
  theme_light() + 
  theme(legend.position = "bottom") + xlab("città") +
  ylab("Score accuratezze") + 
  ggtitle("Distribuzione score accuratezze per città") + 
  theme(axis.text.x = element_text(angle = 90))
```


## Provincia

```{r}
ggplot(data, 
       aes(x = as.factor(province), y = total_score, 
           color = anni_scolarita)) + geom_boxplot(size = 1.1) + 
  theme_light() + 
  theme(legend.position = "bottom") + xlab("città") +
  ylab("Score accuratezze") + 
  ggtitle("Distribuzione score accuratezze per città") + 
  theme(axis.text.x = element_text(angle = 90))
```


:::


# Analisi item TR
Viene creata una divisione per gli item in diversi livelli di difficoltà a seconda che la loro item probability cada all'interno di diversi intervalli basati sui quartili:

- < q1 difficili

- q1 q2 incluso medio diff

- q2 q3 incluso facili

- maggiori q3 molto facili


```{r}
d = data
# PREPARAZIONE DISTRATTORI -----
d$response_vector = gsub('[\"]', "", d$response_vector)
d$distractors = gsub(".*_", "", d$response_vector)
# d distractors contiene i dettagli su ogni distrattore -----
d$distractors = gsub(".svg]", "", d$distractors)
# macro_distractors contiene solo le macrocategorie di distrattori 
d$macro_distractors = numeric(nrow(d))

for (i in 1:nrow(d)) {
  if(d[i, "distractors"] == "d.union" | d[i, "distractors"] == "diff1" | d[i, "distractors"] == "diff2" | d[i, "distractors"] == "diff") {
    d[i, "macro_distractors"] = "D"
  } else if (grepl("ic", d[i, "distractors"])  ==T) {
    d[i, "macro_distractors"] = "IC"
  } else if (grepl("wp", d[i, "distractors"])  ==T) {
    d[i, "macro_distractors"] = "WP"
  } else if (grepl("correct", d[i, "distractors"])  ==T){
    d[i, "macro_distractors"] = "correct"
  } else if (d[i, "distractors"] == "r.left" | d[i, "distractors"] == "r.top" | d[i, "distractors"] == "r.diag"){
    d[i, "macro_distractors"] = "R"
  }
}
# controlla che tutti siano stati ricodificati correttamente 
# ATTENZIONE: FARE CORRERE SOLO UNA VOLTA ------
d$id_question = d$id_question + 1
guide$id_question = 1:40

# UNISCE I DETTAGLI DEGLI ITEM AL DATASET (CREA D1) ----
d1  =merge(d, guide, by = "id_question")
# ricodifica le risposte in corrette ed errate 
d1$task_success = ifelse(d1$task_success == "False",
                         "wrong", "correct")

# calcola il numero di osservazioni per ogni soggetto -----
freq_p = data.frame(table(d1$id))
colnames(freq_p) = c("id", "freq_p")
# lo unisce a d1 --- 
d1 = merge(d1, freq_p, by = "id")

# SOLO PER ADESSO RICODIFICO NULL IN 0 ------
d1[d1$anni_scolarita %in% "NULL", "anni_scolarita"] = 0

# mi prendo la scolarità e calcolo il numero di bambini per ongi anno di scolarità 
scol = d1[, c("id", "anni_scolarita")]
scol = scol %>% 
  distinct()

freq_scol_p = data.frame(table(scol$anni_scolarita))
colnames(freq_scol_p) = c("anni_scolarita", "num_scol")
# aggiungo il numero di osservazioni per ogni anno di scolarità al dataset 
# generale 

d1 = merge(d1, freq_scol_p, by = "anni_scolarita")



# calcola il numero di osservazioni su ogni item ATTRAVERSO LA SCOLARITà------
freq_i = data.frame(table(d1$id_question))
colnames(freq_i) = c("id_question", "freq_i")
# unissce il totale di obs sugli item al dataset -----
d1 = merge(d1, freq_i, by = "id_question")

# crea il numero di risposte corrette per ogni soggetto considerando anche scolarità
correct_p = data.frame(table(d1$id, d1$task_success))
colnames(correct_p) = c("id", "response",  "freq")
correct_p = merge(correct_p, freq_p, by = "id")
# calcola la proporzione di risp corrette dividendo il numero di risp 
# corrette per il numeor di osservazioni sul soggetto 
correct_p$prop = correct_p$freq/correct_p$freq_p
# prendo solo le risposte corrette ---
only_correct_p = correct_p[correct_p$response %in% "correct", ]
# riordino le proporsioni 
only_correct_p = only_correct_p[order(only_correct_p$prop), ]
only_correct_p$p_cres <- 1:nrow(only_correct_p)
only_correct_p$p_cres <- as.factor(only_correct_p$p_cres)

# unisco scolarità al dataset ----

only_correct_p = merge(only_correct_p, scol, by = "id")


# calcolo le proporzioni di risposte corrette per gli item ---- 
correct_i = data.frame(table(d1$id_question, d1$task_success))
colnames(correct_i) = c("id_question", "response", "Freq")
# unisco il totale degli item ----

correct_i = merge(correct_i, freq_i, by = "id_question")
correct_i$prop = correct_i$Freq/correct_i$freq_i

correct_i = correct_i[correct_i$response %in% "correct", ]

cutoff = quantile(correct_i$prop)

# aggiungo una divisione di item in base alla loro distribuzione quartilica
# < q1 difficili
# q1 q2 incluso medio diff
# q2 q3 incluso gnec
# maggiori q3 molto facili

for (i in 1:nrow(correct_i)) {
  if (correct_i[i, "prop"] <= cutoff[2]) {
    correct_i[i, "item.diff"] = "diff"
  } else if (correct_i[i, "prop"] > cutoff[2] & correct_i[i, "prop"] <= cutoff[3]) {
    correct_i[i, "item.diff"] = "medio.diff"
  } else if ( correct_i[i, "prop"] > cutoff[3] & correct_i[i, "prop"] <= cutoff[4]) {
    correct_i[i, "item.diff"] = "facili"
  } else if (correct_i[i, "prop"] > cutoff[4]) {
    correct_i[i, "item.diff"] = "molto.facili"
  }
}

colnames(correct_i) = c("id_question", "response", "freq.correct", "freq_i", "prop_c_item", 
                        "item.diff")
mapping_item = correct_i[, c("id_question", "item.diff")]
# unicsco al dataset grande il mapping degli item (difficili, facili ecc)


d1 = merge(d1, correct_i, by = "id_question")


item.quartili.mean = aggregate(time.diff.item ~ anni_scolarita + item.diff, 
                               d1, 
                               mean)
colnames(item.quartili.mean)[ncol(item.quartili.mean)] = "mean.time.item"

item.quartili.sd = aggregate(time.diff.item ~ anni_scolarita + item.diff, 
                             d1, 
                             sd)
colnames(item.quartili.sd)[ncol(item.quartili.sd)] = "sd.time.item"



item.quartili = merge(item.quartili.mean, 
                      item.quartili.sd, by = c("anni_scolarita", "item.diff"))

item.quartili$group = 1
# tempi di risposta per scolarita e per difficoltà degli item -----


```

```{r}
kableExtra::kable(table(correct_i$item.diff), caption = "Numero di item per le diverse suddivisioni in quartili")
```


::: {.panel-tabset}
## TR per difficoltà

```{r}
item.quartili.mean.c = aggregate(time.diff.item ~ anni_scolarita + item.diff + task_success, 
                                 d1, 
                                 mean)
colnames(item.quartili.mean.c)[ncol(item.quartili.mean.c)] = "mean.time.item"

item.quartili.sd.c = aggregate(time.diff.item ~ anni_scolarita + item.diff + task_success, 
                               d1, 
                               sd)
colnames(item.quartili.sd.c)[ncol(item.quartili.sd.c)] = "sd.time.item"



item.quartili.c = merge(item.quartili.mean.c, 
                        item.quartili.sd.c, by = c("anni_scolarita", "item.diff", "task_success"))
item.quartili.c$task_success = factor(item.quartili.c$task_success, 
                                      levels = c("wrong", "correct"))
ggplot(item.quartili.c, 
       aes(x = anni_scolarita, y = mean.time.item, group=task_success, color = task_success)) + 
  geom_point(size = 3)  + geom_line(aes(y = mean.time.item), 
                                    size = 1) +
  facet_wrap(~item.diff) + theme_light() + ggtitle("Tempi di risposta per difficiotlà dell'item e scolairtà")


```


## TR per difficoltà (sd)

```{r}
ggplot(item.quartili.c, 
       aes(x = anni_scolarita, y = mean.time.item, group=task_success, color = task_success)) + 
  geom_point(size = 3)  + geom_line(aes(y = mean.time.item), 
                                    size = 1) +
  facet_wrap(~item.diff) + theme_light() + 
  geom_errorbar(aes(ymin = mean.time.item - sd.time.item, 
                    ymax = mean.time.item + sd.time.item), 
                width= .3, size = .8) + ggtitle("Tempi di risposta per difficiotlà dell'item e scolairtà")

```



## TR per difficoltà (corrette)

```{r}
# Tempi di risposta (solo corrette) per scolarita grafico -----
item.quartili$item.diff = factor(item.quartili$item.diff, 
                                 levels = c("molto.facili", 
                                            "facili", "medio.diff", "diff"))
ggplot(item.quartili, 
       aes(x = anni_scolarita, y = mean.time.item, 
           group=item.diff, color = item.diff, 
           linetype = item.diff)) + 
  geom_point(size = 5) + geom_line(aes(y = mean.time.item), 
                                   size= 1.2)  + theme_light() + ggtitle("Tempi di risposta (solo corrette) per scolarita")

```


## TR per difficoltà (corrette, sd)

```{r}
d.correct = d1[d1$task_success %in% "correct", ]

item.quartili.mean = aggregate(time.diff.item ~ anni_scolarita + item.diff, 
                               d.correct, 
                               mean)
colnames(item.quartili.mean)[ncol(item.quartili.mean)] = "mean.time.item"

item.quartili.sd = aggregate(time.diff.item ~ anni_scolarita + item.diff, 
                             d.correct, 
                             sd)
colnames(item.quartili.sd)[ncol(item.quartili.sd)] = "sd.time.item"



item.quartili = merge(item.quartili.mean, 
                      item.quartili.sd, by = c("anni_scolarita", "item.diff"))

item.quartili$group = 1
ggplot(item.quartili, 
       aes(x = anni_scolarita, y = mean.time.item, 
           group=item.diff, color = item.diff)) + 
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = mean.time.item - sd.time.item, 
                    ymax = mean.time.item + sd.time.item), 
                width= .3) + 
  geom_line(aes(y = mean.time.item), 
            size = 1.2)  + theme_light() + ggtitle("Tempi di risposta (solo corrette) per scolarita")



```


:::

# Analisi item accuratezze

::: {.panel-tabset}

## Persone (generale)

```{r}
d1$freq_i.x = NULL
names(d1)[colnames(d1) == "freq_i.y"] = "freq_i"

correct_p = data.frame(table(d1$id, d1$task_success))
colnames(correct_p) = c("id", "response", "freq")
correct_p = merge(correct_p, freq_p, by = "id")
# calcola la proporzione di risp corrette dividendo il numero di risp 
# corrette per il numeor di osservazioni sul soggetto 
correct_p$prop = correct_p$freq/correct_p$freq_p
# prendo solo le risposte corrette ---
only_correct_p = correct_p[correct_p$response %in% "correct", ]
# riordino le proporsioni 
only_correct_p = only_correct_p[order(only_correct_p$prop), ]
only_correct_p$p_cres <- 1:nrow(only_correct_p)
only_correct_p$p_cres <- as.factor(only_correct_p$p_cres)

# unisco scolarità al dataset ----

only_correct_p = merge(only_correct_p, scol, by = "id")

av_p_prop = aggregate(prop ~ anni_scolarita, only_correct_p, mean)
colnames(av_p_prop)[2] = "mean.prop"

sd_p_prop = aggregate(prop ~ anni_scolarita, only_correct_p, sd)
colnames(sd_p_prop)[2] = "sd.prop"


sbj_prop_summary = merge(av_p_prop, sd_p_prop, 
                         by = "anni_scolarita")
sbj_prop_summary$group = 1
# grafico score medio per anni di scolarità -------
ggplot(sbj_prop_summary, 
       aes(x = anni_scolarita, y = mean.prop)) + geom_point(size = 4) +
  geom_errorbar(aes(ymin = mean.prop-sd.prop, 
                    ymax=mean.prop+sd.prop), 
                width = .2) + 
  ylab("Proporzione risposte corrette") + xlab("Anni di scolarità") +
  theme_light() + geom_line(aes(x=anni_scolarita, y = mean.prop, 
                                group=group)) + ylim(0,1 )

```


## Item (generale)

```{r}
freq_i_as = data.frame(table(d1$id_question, d1$anni_scolarita))
colnames(freq_i_as) = c("id_question", "anni_scolarita", "freq_i_as")


d1 = merge(d1, freq_i_as, by = c("id_question", "anni_scolarita"))


item_correct_scol = data.frame(table(d1$id_question, 
                                     d1$task_success, d1$anni_scolarita))
colnames(item_correct_scol) = c("id_question", "response", "anni_scolarita", "freq")

item_correct = data.frame(table(d1$id_question, 
                                d1$task_success))
colnames(item_correct) = c("id_question", "response", "freq")



item_correct = merge(item_correct, freq_i, 
                     by = "id_question")
# dividi in quartili sulla proporzione 
# poi plotta sulle scolarità 
# tutto sugli ITEM 

#item_correct_scol=item_correct_scol[item_correct_scol$response %in% "correct", ]
item_correct_scol = merge(item_correct_scol, 
                          freq_i_as, 
                          by = c("id_question", "anni_scolarita"))

item_correct_scol = merge(item_correct_scol, 
                          guide, by = "id_question")

item_correct_scol$prop = item_correct_scol$freq/item_correct_scol$freq_i_as
item_correct_scol$response = factor(item_correct_scol$response, 
                                      levels = c("wrong", "correct"))
# Proporizione risposte corrette per scolarità -------
ggplot(item_correct_scol, 
       aes(x = id_question, y = prop, fill = response)) + 
  geom_bar(stat = "identity", position = position_dodge()) + 
  facet_wrap(~anni_scolarita) + 
  ggtitle("Proporzione risposte corrette per ogni item") + theme_light()

```


:::


## Focus sugi item 

### Risposte corrette per scolarità

```{r}

ggplot(item_correct_scol, 
       aes(x = tipo, y = prop, fill = response)) + 
  geom_bar(stat = "identity", position = position_dodge()) + 
  facet_wrap(~anni_scolarita) + 
  ggtitle("Proporzione risposte corrette per tipologie di matrice") + 
  theme_light()
```

### Risposte corrette per scolarità tipo e colore

```{r}
ggplot(item_correct_scol, 
       aes(x = anni_scolarita, y = prop, fill = response)) + 
  geom_bar(stat = "identity", position = position_dodge()) + 
  facet_wrap(~tipo*colore) + 
  ggtitle("Proporzione risposte corrette per tipologie di matrice e colore") + 
  theme_light()
```


## Distrattori 


::: {.panel-tabset}
### Scolarità, tipo di matrice e colore 

```{r}
dist.scol = data.frame(table(d1$macro_distractors, d1$anni_scolarita, d1$tipo, d1$colore))
colnames(dist.scol) = c("dist", "scol", "tipo", "colore", "freq")


tot.dist.scol = aggregate(freq ~ scol + tipo + colore, dist.scol, sum)
colnames(tot.dist.scol)[4] = "freq.tot"


dist.scol = merge(dist.scol, tot.dist.scol, by = c("scol", "tipo", "colore"))
dist.scol$prop = dist.scol$freq/dist.scol$freq.tot

dist.scol = dist.scol[!is.nan(dist.scol$prop), ]


ggplot(dist.scol, 
       aes(x = scol, y = prop, fill = dist)) + 
  geom_bar(stat="identity", position = position_dodge(), color = "black") + 
  facet_wrap(~tipo*colore) + 
  ggtitle("Proporzione per diversi distrattori") + theme_light()

```

### Scolarità, distrattori: Una cella

```{r}
dist.scol.item = data.frame(table(d1$macro_distractors, d1$anni_scolarita, d1$id_question))
colnames(dist.scol.item) = c("dist", "scol", "id_question", "freq")


tot.dist.scol.item = aggregate(freq ~ scol + id_question, dist.scol.item, sum)
colnames(tot.dist.scol.item)[ncol(tot.dist.scol.item)] = "freq.tot" 

dist.scol.item = merge(dist.scol.item, tot.dist.scol.item, 
                       by = c("scol", "id_question"))

dist.scol.item$prop = dist.scol.item$freq/dist.scol.item$freq.tot

dist.scol.item = merge(dist.scol.item, 
                       guide, by = "id_question")

ggplot(dist.scol.item[dist.scol.item$tipo %in% "una.cella", ], 
       aes(x = id_question, y = prop, fill = dist)) + 
  geom_bar(stat="identity", position = position_dodge(), color = "black") + 
  facet_wrap(~scol) + 
  ggtitle("Proporzione per diversi distrattori: Una cella") + theme_light() +
  xlab("Matrice") + ylab("Proporzione")


```

### Scolarità, distrattori: Due celle

```{r}
ggplot(dist.scol.item[dist.scol.item$tipo %in% "due.celle", ], 
       aes(x = id_question, y = prop, fill = dist)) + 
  geom_bar(stat="identity", position = position_dodge(), color = "black") + 
  facet_wrap(~scol) + 
  ggtitle("Proporzione per diversi distrattori: Due celle") + theme_light() +
  xlab("Matrice") + ylab("Proporzione")
```

### Scolarità, distrattori: Tre celle

```{r}
ggplot(dist.scol.item[dist.scol.item$tipo %in% "tre.celle", ], 
       aes(x = id_question, y = prop, fill = dist)) + 
  geom_bar(stat="identity", position = position_dodge(), color = "black") + 
  facet_wrap(~scol) + 
  ggtitle("Proporzione per diversi distrattori: Tre celle") + theme_light() +
  xlab("Matrice") + ylab("Proporzione")
```



:::

# Modelli

## Unidimensioalità 

Per testare unidimensionalità, ho usato dei modelli di Analisi Fattorial Confermativa con il pacchetto `lavaan`. 

Modello unidimensionale: 

```{r}
#| message: false
library(lavaan)

dl = d1[, c("id", "matrice", "tipo", "colore", 
            "anni_scolarita", "gender", 
            "task_success", "distractors", "macro_distractors",
            "time.diff.item")]

# isolo le variabili demografiche che ora non mi serbono 

demo = dl[, c("id", "tipo", "colore", "matrice",
              "anni_scolarita", "gender", 
              "task_success", "distractors", "macro_distractors",
              "time.diff.item")]
demo = demo %>% 
  distinct()

d.temp = dl[, c("id", "task_success", "matrice")]

d.temp$task_success = ifelse(d.temp$task_success == "correct", 
                             1,
                             0)

wide = reshape(d.temp, 
               direction = "wide", 
               idvar = "id", 
               timevar="matrice")
colnames(wide) = gsub("task_success.", "", colnames(wide))

# partiamo con la cfa
# crea il modello 
names = paste(colnames(wide)[-1], collapse = " + ")

(form.mod = paste("latent =~", names))

latent.model = cfa(form.mod, ordered = colnames(wide)[-1], 
                    data = wide)
a = summary(latent.model, fit.measures = T)

```

Fit: 

```{r}
round(a$fit[c("cfi", "tli", "rmsea")], 2)
```

## Rasch/1Pl

Utilizzo il pacchetto `TAM`.

Fit: 

```{r}
library(TAM)
IRT <- function(theta, a = 1, b = 0, c = 0,e = 1) {
  y <- c + (e - c) * exp(a * (theta - b)) / (1 + exp(a * (theta - b)))
  y[is.na(y)] = 1
  return(y)
}


irt.icc = function(model) {
  item_par = model$item
  est_theta = seq(-4,4, length.out=1000)
  item_prob = list()
  if (any(grep("guess", colnames(item_par))) == F) {
    for (i in 1:nrow(item_par)) {
      item_prob[[i]] = data.frame(theta = est_theta)
      item_prob[[i]]$it_p = IRT(item_prob[[i]]$theta, 
                                b = item_par[i, "xsi.item"], 
                                a = item_par[i, "B.Cat1.Dim1"])
      item_prob[[i]]$item = item_par[i, "item"]
    }
  } else {
    for (i in 1:nrow(item_par)) {
      item_prob[[i]] = data.frame(theta = est_theta)
      item_prob[[i]]$it_p = IRT(item_prob[[i]]$theta, 
                                b = item_par[i, "AXsi_.Cat1"], 
                                a = item_par[i, "B.Cat1.Dim1"], 
                                c = item_par[i, "guess"])
      item_prob[[i]]$item = item_par[i, "item"]
    }
  }
  p = do.call("rbind", item_prob)
  gp = ggplot(p, 
              aes(x = theta, y = it_p, group = item, col =
                    item)) + geom_line(lwd = 1)
  object = list(prob.data = p, 
                icc.graph = gp)
  return(object)
}

m.1pl = tam.mml(wide[,-1], verbose = F)
m.1pl.fit = tam.modelfit(m.1pl, progress = F)

m.1pl.fit$statlist

```


Fit degli item basato sul RMSD: 

```{r}
item.fit.1pl = IRT.itemfit(m.1pl)
fit.item.summary = item.fit.1pl$RMSD

for (i in 1:nrow(fit.item.summary)) {
  if (fit.item.summary[i, "Group1"] < .10) {
    fit.item.summary[i, "summary"] = "fit.ottimale"
  } else if (fit.item.summary[i, "Group1"] >= .10 & fit.item.summary[i, "Group1"] < .15) {
    fit.item.summary[i, "summary"] = "fit.okay"
  } else {
    fit.item.summary[i, "summary"] = "no.fit"
  }
}

fit.item.summary[!fit.item.summary$summary %in% "fit.ottimale", ]
```


::: {.panel-tabset}

### ICC tutte insieme

```{r}
p = irt.icc(m.1pl)
prob.m1 = p$prob.data
colnames(prob.m1)[3] = "matrice"

prob.m1 = merge(prob.m1, guide, by = "matrice")
ggplot(prob.m1, 
       aes(x = theta, y = it_p, group = matrice, 
           col = matrice)) + geom_line( lwd = 1) +
theme_light()

```

### ICC separate per colore 


```{r}
ggplot(prob.m1, 
       aes(x = theta, y = it_p, group = matrice, 
           col = matrice)) + geom_line(aes(linetype = colore), lwd = 1) +
theme_light()

```



### ICC separate per colore e tipo

```{r}

prob.m1$col.tipo = paste(prob.m1$tipo, prob.m1$colore, sep = ".")
prob.m1$col.tipo = factor(prob.m1$col.tipo, 
                          levels = c("una.cella.si", 
                                     "due.celle.no", 
                                     "due.celle.si", 
                                     "tre.celle.no", 
                                     "tre.celle.si"))
ggplot(prob.m1, 
       aes(x = theta, y = it_p, group = matrice, 
           col = col.tipo)) + geom_line(aes(linetype = col.tipo), lwd = 1) + theme_light()

```

::: {.panel-tabset}

## 2PL 

```{r}

m.2pl = tam.mml.2pl(wide[,-1], irtmodel = "2PL", 
                    verbose = F)
m.2pl.fit = tam.modelfit(m.2pl, progress = F)

m.2pl.fit$statlist

```

Model comparison: 
```{r}
IRT.compareModels(m.1pl, m.2pl)
```



Fit degli item basato sul RMSD: 

```{r}
item.fit.2pl = IRT.itemfit(m.2pl)
fit.item.summary.2pl = item.fit.2pl$RMSD

for (i in 1:nrow(fit.item.summary.2pl)) {
  if (fit.item.summary.2pl[i, "Group1"] < .10) {
    fit.item.summary.2pl[i, "summary"] = "fit.ottimale"
  } else if (fit.item.summary.2pl[i, "Group1"] >= .10 & fit.item.summary.2pl[i, "Group1"] < .15) {
    fit.item.summary.2pl[i, "summary"] = "fit.okay"
  } else {
    fit.item.summary.2pl[i, "summary"] = "no.fit"
  }
}

fit.item.summary.2pl[!fit.item.summary.2pl$summary %in% "fit.ottimale", ]
```


::: {.panel-tabset}

### ICC tutte insieme

```{r}
p = irt.icc(m.2pl)
prob.m2 = p$prob.data
colnames(prob.m2)[3] = "matrice"

prob.m2 = merge(prob.m2, guide, by = "matrice")
ggplot(prob.m2, 
       aes(x = theta, y = it_p, group = matrice, 
           col = matrice)) + geom_line( lwd = 1) +
theme_light()

```

### ICC separate per colore 


```{r}
ggplot(prob.m2, 
       aes(x = theta, y = it_p, group = matrice, 
           col = matrice)) + geom_line(aes(linetype = colore), lwd = 1) +
theme_light()

```



### ICC separate per colore e tipo

```{r}

prob.m2$col.tipo = paste(prob.m2$tipo, prob.m2$colore, sep = ".")
prob.m2$col.tipo = factor(prob.m2$col.tipo, 
                          levels = c("una.cella.si", 
                                     "due.celle.no", 
                                     "due.celle.si", 
                                     "tre.celle.no", 
                                     "tre.celle.si"))
ggplot(prob.m2, 
       aes(x = theta, y = it_p, group = matrice, 
           col = col.tipo)) + geom_line(aes(linetype = col.tipo), lwd = 1) + theme_light()

```

::: {.panel-tabset}

## GLMM

Utilizzo questi modelli per andare a vedre un possibile Differential Item Functioning a seconda del livello di scolarità. 

Dato il modello di Rasch/1PL: 

$$P(x_{ps} = 1|\theta_p, b_s) = \frac{exp(\theta_p -b_s)}{1+ exp(\theta_p - b_s)}$$
si può dimostrare che è sostanzialmente equivalente all'inverso del *logit* (i.e., la link function usata nei generalized linear model per mettere in contatto la combinazione lineare dei predittori $\eta_{ps}$ con la probabilità di rispondere correttamente $\mu_{ps}$): 

$$logit^{-1} = \mu_{ps} = \frac{\eta_{ps}}{1 + \eta_{ps}}$$

Se in $\eta_{ps}$ si considerano le caratteristiche delle persone e degli item ($\eta_{ps} = \theta_p + b_s$) si otttiene una parametrizzazione di tipo Rasch più "rilassata" (perché di fatto non è il modello di Rasch). Tuttavia, le stime che in Rasch sarebbero di difficoltà dell'item, vanno lette in termini di **facilità dell'item** $\rightarrow$ più è alto il valore di $b$, più l'item + facile **maggiore** è la probabilità di risposta corretta. 

Confronto due modelli. Il modello nullo: 

```{r eval=F, echo = T}

m0 = glmer(task_success ~ 0+ anni_scolarita + (1|id) +
             (1|matrice), 
           data = dl, 
           family = "binomial")
```

e il modello dove "libero" la varianza degli item a seconda della scolarità: 

```{r eval=F, echo = T}
m1 = glmer(task_success ~ 0+ anni_scolarita + (1|id) +
             ( 0+ anni_scolarita|matrice), 
           data = dl, 
           family = "binomial", 
           glmerControl(optimizer = "bobyqa", 
                        calc.derivs = FALSE))

```

Per scegliere il migliore (i.e., per capire se liberare la varianza sugli item a seconda della scolarità è supportao dai dati ed ha quindi senso) procedo con model comparison

```{r}
library(lme4)
dl$task_success = ifelse(dl$task_success == "correct", 
                         1, 0)

m0 = glmer(task_success ~ 0+ anni_scolarita + (1|id) +
             (1|matrice), 
           data = dl, 
           family = "binomial")



# non mi fido molto, meglio aspettare più dati 
m1 = glmer(task_success ~ 0+ anni_scolarita + (1|id) +
             ( 0+ anni_scolarita|matrice), 
           data = dl, 
           family = "binomial", 
           glmerControl(optimizer = "bobyqa", 
                        calc.derivs = FALSE))



anova(m1, m0)


```


```{r}
m1.re = as.data.frame(ranef(m1, condVar = T))
re.item = m1.re[grep("young", m1.re$grp), ]

ggplot(re.item,
       aes(x = condval, y = grp, 
           color = grp)) + geom_point() + 
  facet_wrap(~term) + theme_light()

```


```{r}
m1.re = as.data.frame(ranef(m1, condVar = T))
re.item = m1.re[grep("young", m1.re$grp), ]

ggplot(re.item,
       aes(x = condval, y = grp, 
           color = term)) + geom_point(size = 3) + theme_light()

```


<!-- ```{r} -->
<!-- item.m1 = coef(m1)$matrice[,-1] -->
<!-- item.m1$matrice = rownames(item.m1) -->

<!-- item.m1l = reshape(item.m1, -->
<!--                    idvar = "matrice", -->
<!--                    times = (names(item.m1)[-ncol(item.m1)]), -->
<!--                    timevar = "scol", -->
<!--                    varying = list(names(item.m1)[-ncol(item.m1)]), -->
<!--                    direction = "long", v.names = "b") -->


<!-- temp.theta = prob.m2[, c("matrice", "theta")] -->
<!-- item.m1l = merge(temp.theta, item.m1l, by = "matrice" ) -->

<!-- item.m1l$prob = IRT(item.m1l$theta, -item.m1l$b) -->

<!-- ggplot(item.m1l, -->
<!--        aes(x = theta, y = prob, -->
<!--            group = matrice)) + geom_line() + theme_light() -->
<!-- ``` -->


